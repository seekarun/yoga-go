{
  "version": "48.0.0",
  "artifacts": {
    "YogaGoNetworkStack.assets": {
      "type": "cdk:asset-manifest",
      "properties": {
        "file": "YogaGoNetworkStack.assets.json",
        "requiresBootstrapStackVersion": 6,
        "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version"
      }
    },
    "YogaGoNetworkStack": {
      "type": "aws:cloudformation:stack",
      "environment": "aws://313060311593/ap-southeast-2",
      "properties": {
        "templateFile": "YogaGoNetworkStack.template.json",
        "terminationProtection": false,
        "tags": {
          "Environment": "production",
          "ManagedBy": "CDK",
          "Project": "yoga-go"
        },
        "validateOnSynth": false,
        "assumeRoleArn": "arn:${AWS::Partition}:iam::313060311593:role/cdk-hnb659fds-deploy-role-313060311593-ap-southeast-2",
        "cloudFormationExecutionRoleArn": "arn:${AWS::Partition}:iam::313060311593:role/cdk-hnb659fds-cfn-exec-role-313060311593-ap-southeast-2",
        "stackTemplateAssetObjectUrl": "s3://cdk-hnb659fds-assets-313060311593-ap-southeast-2/4bdd570313f6d242498b1b3ff96eebf67a831515726bcb15f3468f518c2df3bf.json",
        "requiresBootstrapStackVersion": 6,
        "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
        "additionalDependencies": ["YogaGoNetworkStack.assets"],
        "lookupRole": {
          "arn": "arn:${AWS::Partition}:iam::313060311593:role/cdk-hnb659fds-lookup-role-313060311593-ap-southeast-2",
          "requiresBootstrapStackVersion": 8,
          "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version"
        }
      },
      "dependencies": ["YogaGoNetworkStack.assets"],
      "metadata": {
        "/YogaGoNetworkStack": [
          {
            "type": "aws:cdk:stack-tags",
            "data": [
              {
                "Key": "Environment",
                "Value": "production"
              },
              {
                "Key": "ManagedBy",
                "Value": "CDK"
              },
              {
                "Key": "Project",
                "Value": "yoga-go"
              }
            ]
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcF15D7027"
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/PublicSubnet1/Subnet": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcPublicSubnet1SubnetD3F314A2"
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/PublicSubnet1/RouteTable": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcPublicSubnet1RouteTable2D716891"
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/PublicSubnet1/RouteTableAssociation": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcPublicSubnet1RouteTableAssociation037C3999"
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/PublicSubnet1/DefaultRoute": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcPublicSubnet1DefaultRoute15F05D54"
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/PublicSubnet1/EIP": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcPublicSubnet1EIP1B4E942A"
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/PublicSubnet1/NATGateway": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcPublicSubnet1NATGateway977B96DB"
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/PublicSubnet2/Subnet": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcPublicSubnet2SubnetB712836A"
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/PublicSubnet2/RouteTable": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcPublicSubnet2RouteTableDF95FD07"
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/PublicSubnet2/RouteTableAssociation": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcPublicSubnet2RouteTableAssociation9EA130C2"
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/PublicSubnet2/DefaultRoute": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcPublicSubnet2DefaultRoute3BACB8B9"
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/PrivateSubnet1/Subnet": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcPrivateSubnet1Subnet46CA2612"
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/PrivateSubnet1/RouteTable": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcPrivateSubnet1RouteTable08631F6D"
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/PrivateSubnet1/RouteTableAssociation": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcPrivateSubnet1RouteTableAssociation6DF0AC67"
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/PrivateSubnet1/DefaultRoute": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcPrivateSubnet1DefaultRouteEDAF2F80"
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/PrivateSubnet2/Subnet": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcPrivateSubnet2Subnet32E2BEB5"
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/PrivateSubnet2/RouteTable": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcPrivateSubnet2RouteTable0B573A39"
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/PrivateSubnet2/RouteTableAssociation": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcPrivateSubnet2RouteTableAssociation40C1452B"
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/PrivateSubnet2/DefaultRoute": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcPrivateSubnet2DefaultRoute316D2A54"
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/IGW": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcIGW4EFB3033"
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/VPCGW": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcVPCGWF795E391"
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/RestrictDefaultSecurityGroupCustomResource/Default": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcRestrictDefaultSecurityGroupCustomResource657CE625"
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/S3Endpoint/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcS3Endpoint58E3635C"
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/EcrApiEndpoint/SecurityGroup/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcEcrApiEndpointSecurityGroup019B517A"
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/EcrApiEndpoint/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcEcrApiEndpointE4EDD8FC"
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/EcrDockerEndpoint/SecurityGroup/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcEcrDockerEndpointSecurityGroup319904BE"
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/EcrDockerEndpoint/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcEcrDockerEndpoint8F6DCA3E"
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/CloudWatchLogsEndpoint/SecurityGroup/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcCloudWatchLogsEndpointSecurityGroup4B5CDD58"
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/CloudWatchLogsEndpoint/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcCloudWatchLogsEndpoint74AEF72E"
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/SecretsManagerEndpoint/SecurityGroup/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcSecretsManagerEndpointSecurityGroup3B434BE9"
          }
        ],
        "/YogaGoNetworkStack/YogaGoVpc/SecretsManagerEndpoint/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoVpcSecretsManagerEndpoint056C2ACC"
          }
        ],
        "/YogaGoNetworkStack/Custom::VpcRestrictDefaultSGCustomResourceProvider": [
          {
            "type": "aws:cdk:is-custom-resource-handler-customResourceProvider",
            "data": true
          }
        ],
        "/YogaGoNetworkStack/Custom::VpcRestrictDefaultSGCustomResourceProvider/Role": [
          {
            "type": "aws:cdk:logicalId",
            "data": "CustomVpcRestrictDefaultSGCustomResourceProviderRole26592FE0"
          }
        ],
        "/YogaGoNetworkStack/Custom::VpcRestrictDefaultSGCustomResourceProvider/Handler": [
          {
            "type": "aws:cdk:logicalId",
            "data": "CustomVpcRestrictDefaultSGCustomResourceProviderHandlerDC833E5E"
          }
        ],
        "/YogaGoNetworkStack/VpcId": [
          {
            "type": "aws:cdk:logicalId",
            "data": "VpcId"
          }
        ],
        "/YogaGoNetworkStack/VpcCidr": [
          {
            "type": "aws:cdk:logicalId",
            "data": "VpcCidr"
          }
        ],
        "/YogaGoNetworkStack/CDKMetadata/Default": [
          {
            "type": "aws:cdk:logicalId",
            "data": "CDKMetadata"
          }
        ],
        "/YogaGoNetworkStack/Exports/Output{\"Ref\":\"YogaGoVpcF15D7027\"}": [
          {
            "type": "aws:cdk:logicalId",
            "data": "ExportsOutputRefYogaGoVpcF15D70276593FDC4"
          }
        ],
        "/YogaGoNetworkStack/Exports/Output{\"Ref\":\"YogaGoVpcPublicSubnet1SubnetD3F314A2\"}": [
          {
            "type": "aws:cdk:logicalId",
            "data": "ExportsOutputRefYogaGoVpcPublicSubnet1SubnetD3F314A23F3D8C9E"
          }
        ],
        "/YogaGoNetworkStack/Exports/Output{\"Ref\":\"YogaGoVpcPublicSubnet2SubnetB712836A\"}": [
          {
            "type": "aws:cdk:logicalId",
            "data": "ExportsOutputRefYogaGoVpcPublicSubnet2SubnetB712836A30A7A460"
          }
        ],
        "/YogaGoNetworkStack/BootstrapVersion": [
          {
            "type": "aws:cdk:logicalId",
            "data": "BootstrapVersion"
          }
        ],
        "/YogaGoNetworkStack/CheckBootstrapVersion": [
          {
            "type": "aws:cdk:logicalId",
            "data": "CheckBootstrapVersion"
          }
        ]
      },
      "displayName": "YogaGoNetworkStack"
    },
    "YogaGoLoadBalancerStack.assets": {
      "type": "cdk:asset-manifest",
      "properties": {
        "file": "YogaGoLoadBalancerStack.assets.json",
        "requiresBootstrapStackVersion": 6,
        "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version"
      }
    },
    "YogaGoLoadBalancerStack": {
      "type": "aws:cloudformation:stack",
      "environment": "aws://313060311593/ap-southeast-2",
      "properties": {
        "templateFile": "YogaGoLoadBalancerStack.template.json",
        "terminationProtection": false,
        "tags": {
          "Environment": "production",
          "ManagedBy": "CDK",
          "Project": "yoga-go"
        },
        "validateOnSynth": false,
        "assumeRoleArn": "arn:${AWS::Partition}:iam::313060311593:role/cdk-hnb659fds-deploy-role-313060311593-ap-southeast-2",
        "cloudFormationExecutionRoleArn": "arn:${AWS::Partition}:iam::313060311593:role/cdk-hnb659fds-cfn-exec-role-313060311593-ap-southeast-2",
        "stackTemplateAssetObjectUrl": "s3://cdk-hnb659fds-assets-313060311593-ap-southeast-2/219373447669f83f25e240b1e501aa5aee24fbb38f7ef71a7383a4cb5c5ab229.json",
        "requiresBootstrapStackVersion": 6,
        "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
        "additionalDependencies": ["YogaGoLoadBalancerStack.assets"],
        "lookupRole": {
          "arn": "arn:${AWS::Partition}:iam::313060311593:role/cdk-hnb659fds-lookup-role-313060311593-ap-southeast-2",
          "requiresBootstrapStackVersion": 8,
          "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version"
        }
      },
      "dependencies": ["YogaGoNetworkStack", "YogaGoLoadBalancerStack.assets"],
      "metadata": {
        "/YogaGoLoadBalancerStack": [
          {
            "type": "aws:cdk:stack-tags",
            "data": [
              {
                "Key": "Environment",
                "Value": "production"
              },
              {
                "Key": "ManagedBy",
                "Value": "CDK"
              },
              {
                "Key": "Project",
                "Value": "yoga-go"
              }
            ]
          }
        ],
        "/YogaGoLoadBalancerStack/YogaGoAlbSecurityGroup/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoAlbSecurityGroupB8340205"
          }
        ],
        "/YogaGoLoadBalancerStack/YogaGoLoadBalancer/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoLoadBalancer54F22CF3"
          }
        ],
        "/YogaGoLoadBalancerStack/YogaGoLoadBalancer/HttpListener/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoLoadBalancerHttpListener332678E8"
          }
        ],
        "/YogaGoLoadBalancerStack/YogaGoTargetGroup/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoTargetGroupC2485A7A"
          }
        ],
        "/YogaGoLoadBalancerStack/LoadBalancerDnsName": [
          {
            "type": "aws:cdk:logicalId",
            "data": "LoadBalancerDnsName"
          }
        ],
        "/YogaGoLoadBalancerStack/LoadBalancerArn": [
          {
            "type": "aws:cdk:logicalId",
            "data": "LoadBalancerArn"
          }
        ],
        "/YogaGoLoadBalancerStack/TargetGroupArn": [
          {
            "type": "aws:cdk:logicalId",
            "data": "TargetGroupArn"
          }
        ],
        "/YogaGoLoadBalancerStack/DnsSetupInstructions": [
          {
            "type": "aws:cdk:logicalId",
            "data": "DnsSetupInstructions"
          }
        ],
        "/YogaGoLoadBalancerStack/CDKMetadata/Default": [
          {
            "type": "aws:cdk:logicalId",
            "data": "CDKMetadata"
          }
        ],
        "/YogaGoLoadBalancerStack/Exports/Output{\"Ref\":\"YogaGoTargetGroupC2485A7A\"}": [
          {
            "type": "aws:cdk:logicalId",
            "data": "ExportsOutputRefYogaGoTargetGroupC2485A7A64B60202"
          }
        ],
        "/YogaGoLoadBalancerStack/BootstrapVersion": [
          {
            "type": "aws:cdk:logicalId",
            "data": "BootstrapVersion"
          }
        ],
        "/YogaGoLoadBalancerStack/CheckBootstrapVersion": [
          {
            "type": "aws:cdk:logicalId",
            "data": "CheckBootstrapVersion"
          }
        ]
      },
      "displayName": "YogaGoLoadBalancerStack"
    },
    "YogaGoContainerStack.assets": {
      "type": "cdk:asset-manifest",
      "properties": {
        "file": "YogaGoContainerStack.assets.json",
        "requiresBootstrapStackVersion": 6,
        "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version"
      }
    },
    "YogaGoContainerStack": {
      "type": "aws:cloudformation:stack",
      "environment": "aws://313060311593/ap-southeast-2",
      "properties": {
        "templateFile": "YogaGoContainerStack.template.json",
        "terminationProtection": false,
        "tags": {
          "Environment": "production",
          "ManagedBy": "CDK",
          "Project": "yoga-go"
        },
        "validateOnSynth": false,
        "assumeRoleArn": "arn:${AWS::Partition}:iam::313060311593:role/cdk-hnb659fds-deploy-role-313060311593-ap-southeast-2",
        "cloudFormationExecutionRoleArn": "arn:${AWS::Partition}:iam::313060311593:role/cdk-hnb659fds-cfn-exec-role-313060311593-ap-southeast-2",
        "stackTemplateAssetObjectUrl": "s3://cdk-hnb659fds-assets-313060311593-ap-southeast-2/9ec5fc3409c46c1b66b4ed75e8de89d9d97e1a93c8ff0ca3c7dda0f5c2870063.json",
        "requiresBootstrapStackVersion": 6,
        "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version",
        "additionalDependencies": ["YogaGoContainerStack.assets"],
        "lookupRole": {
          "arn": "arn:${AWS::Partition}:iam::313060311593:role/cdk-hnb659fds-lookup-role-313060311593-ap-southeast-2",
          "requiresBootstrapStackVersion": 8,
          "bootstrapStackVersionSsmParameter": "/cdk-bootstrap/hnb659fds/version"
        }
      },
      "dependencies": [
        "YogaGoNetworkStack",
        "YogaGoLoadBalancerStack",
        "YogaGoContainerStack.assets"
      ],
      "metadata": {
        "/YogaGoContainerStack": [
          {
            "type": "aws:cdk:stack-tags",
            "data": [
              {
                "Key": "Environment",
                "Value": "production"
              },
              {
                "Key": "ManagedBy",
                "Value": "CDK"
              },
              {
                "Key": "Project",
                "Value": "yoga-go"
              }
            ]
          }
        ],
        "/YogaGoContainerStack/YogaGoEcsCluster": [
          {
            "type": "aws:cdk:warning",
            "data": "Blocking container access to instance role will be deprecated. Use the @aws-cdk/aws-ecs:enableImdsBlockingDeprecatedFeature feature flagto keep this feature temporarily. See https://github.com/aws/aws-cdk/discussions/32609 [ack: @aws-cdk/aws-ecs:deprecatedImdsBlocking]",
            "trace": [
              "Annotations.addMessage (/Users/arunsubramaniam/garage/yoga-go/infrastructure/node_modules/aws-cdk-lib/core/lib/annotations.js:1:2066)",
              "Annotations.addWarningV2 (/Users/arunsubramaniam/garage/yoga-go/infrastructure/node_modules/aws-cdk-lib/core/lib/annotations.js:1:984)",
              "WrappedClass.handleCanContainersAccessInstanceRoleForAL2 (/Users/arunsubramaniam/garage/yoga-go/infrastructure/node_modules/aws-cdk-lib/aws-ecs/lib/cluster.js:1:27280)",
              "WrappedClass.configureAutoScalingGroup (/Users/arunsubramaniam/garage/yoga-go/infrastructure/node_modules/aws-cdk-lib/aws-ecs/lib/cluster.js:1:23800)",
              "WrappedClass.addAsgCapacityProvider (/Users/arunsubramaniam/garage/yoga-go/infrastructure/node_modules/aws-cdk-lib/aws-ecs/lib/cluster.js:1:21247)",
              "WrappedClass.<anonymous> (/Users/arunsubramaniam/garage/yoga-go/infrastructure/node_modules/aws-cdk-lib/core/lib/metadata-resource.js:1:2200)",
              "new ContainerStack (/Users/arunsubramaniam/garage/yoga-go/infrastructure/lib/container-stack.ts:136:18)",
              "Object.<anonymous> (/Users/arunsubramaniam/garage/yoga-go/infrastructure/bin/app.ts:52:24)",
              "Module._compile (node:internal/modules/cjs/loader:1692:14)",
              "Module.m._compile (/Users/arunsubramaniam/.npm/_npx/1bf7c3c15bf47d04/node_modules/ts-node/src/index.ts:1618:23)",
              "node:internal/modules/cjs/loader:1824:10",
              "Object.require.extensions.<computed> [as .ts] (/Users/arunsubramaniam/.npm/_npx/1bf7c3c15bf47d04/node_modules/ts-node/src/index.ts:1621:12)",
              "Module.load (node:internal/modules/cjs/loader:1427:32)",
              "Module._load (node:internal/modules/cjs/loader:1250:12)",
              "TracingChannel.traceSync (node:diagnostics_channel:322:14)",
              "wrapModuleLoad (node:internal/modules/cjs/loader:235:24)",
              "Module.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:152:5)",
              "phase4 (/Users/arunsubramaniam/.npm/_npx/1bf7c3c15bf47d04/node_modules/ts-node/src/bin.ts:649:14)",
              "bootstrap (/Users/arunsubramaniam/.npm/_npx/1bf7c3c15bf47d04/node_modules/ts-node/src/bin.ts:95:10)",
              "main (/Users/arunsubramaniam/.npm/_npx/1bf7c3c15bf47d04/node_modules/ts-node/src/bin.ts:55:10)",
              "Object.<anonymous> (/Users/arunsubramaniam/.npm/_npx/1bf7c3c15bf47d04/node_modules/ts-node/src/bin.ts:800:3)",
              "Module._compile (node:internal/modules/cjs/loader:1692:14)",
              "Object.<anonymous> (node:internal/modules/cjs/loader:1824:10)",
              "Module.load (node:internal/modules/cjs/loader:1427:32)",
              "Module._load (node:internal/modules/cjs/loader:1250:12)",
              "TracingChannel.traceSync (node:diagnostics_channel:322:14)",
              "wrapModuleLoad (node:internal/modules/cjs/loader:235:24)",
              "Module.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:152:5)",
              "node:internal/main/run_main_module:33:47"
            ]
          }
        ],
        "/YogaGoContainerStack/YogaGoEcsCluster/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoEcsClusterEAE50111"
          }
        ],
        "/YogaGoContainerStack/YogaGoEcsCluster/YogaGoEcsCluster": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoEcsCluster2E438D52"
          }
        ],
        "/YogaGoContainerStack/YogaGoLogGroup/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoLogGroupA50893EA"
          }
        ],
        "/YogaGoContainerStack/TaskExecutionRole/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "TaskExecutionRole250D2532"
          }
        ],
        "/YogaGoContainerStack/TaskExecutionRole/DefaultPolicy/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "TaskExecutionRoleDefaultPolicyA84DD1B0"
          }
        ],
        "/YogaGoContainerStack/TaskRole/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "TaskRole30FC0FBB"
          }
        ],
        "/YogaGoContainerStack/YogaGoInstanceSecurityGroup/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoInstanceSecurityGroupFF7DFB36"
          }
        ],
        "/YogaGoContainerStack/YogaGoAutoScalingGroup": [
          {
            "type": "aws:cdk:warning",
            "data": "desiredCapacity has been configured. Be aware this will reset the size of your AutoScalingGroup on every deployment. See https://github.com/aws/aws-cdk/issues/5215 [ack: @aws-cdk/aws-autoscaling:desiredCapacitySet]",
            "trace": [
              "Annotations.addMessage (/Users/arunsubramaniam/garage/yoga-go/infrastructure/node_modules/aws-cdk-lib/core/lib/annotations.js:1:2066)",
              "Annotations.addWarningV2 (/Users/arunsubramaniam/garage/yoga-go/infrastructure/node_modules/aws-cdk-lib/core/lib/annotations.js:1:984)",
              "new AutoScalingGroup2 (/Users/arunsubramaniam/garage/yoga-go/infrastructure/node_modules/aws-cdk-lib/aws-autoscaling/lib/auto-scaling-group.js:1:23555)",
              "new AutoScalingGroup2 (/Users/arunsubramaniam/garage/yoga-go/infrastructure/node_modules/aws-cdk-lib/core/lib/prop-injectable.js:1:681)",
              "new ContainerStack (/Users/arunsubramaniam/garage/yoga-go/infrastructure/lib/container-stack.ts:116:29)",
              "Object.<anonymous> (/Users/arunsubramaniam/garage/yoga-go/infrastructure/bin/app.ts:52:24)",
              "Module._compile (node:internal/modules/cjs/loader:1692:14)",
              "Module.m._compile (/Users/arunsubramaniam/.npm/_npx/1bf7c3c15bf47d04/node_modules/ts-node/src/index.ts:1618:23)",
              "node:internal/modules/cjs/loader:1824:10",
              "Object.require.extensions.<computed> [as .ts] (/Users/arunsubramaniam/.npm/_npx/1bf7c3c15bf47d04/node_modules/ts-node/src/index.ts:1621:12)",
              "Module.load (node:internal/modules/cjs/loader:1427:32)",
              "Module._load (node:internal/modules/cjs/loader:1250:12)",
              "TracingChannel.traceSync (node:diagnostics_channel:322:14)",
              "wrapModuleLoad (node:internal/modules/cjs/loader:235:24)",
              "Module.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:152:5)",
              "phase4 (/Users/arunsubramaniam/.npm/_npx/1bf7c3c15bf47d04/node_modules/ts-node/src/bin.ts:649:14)",
              "bootstrap (/Users/arunsubramaniam/.npm/_npx/1bf7c3c15bf47d04/node_modules/ts-node/src/bin.ts:95:10)",
              "main (/Users/arunsubramaniam/.npm/_npx/1bf7c3c15bf47d04/node_modules/ts-node/src/bin.ts:55:10)",
              "Object.<anonymous> (/Users/arunsubramaniam/.npm/_npx/1bf7c3c15bf47d04/node_modules/ts-node/src/bin.ts:800:3)",
              "Module._compile (node:internal/modules/cjs/loader:1692:14)",
              "Object.<anonymous> (node:internal/modules/cjs/loader:1824:10)",
              "Module.load (node:internal/modules/cjs/loader:1427:32)",
              "Module._load (node:internal/modules/cjs/loader:1250:12)",
              "TracingChannel.traceSync (node:diagnostics_channel:322:14)",
              "wrapModuleLoad (node:internal/modules/cjs/loader:235:24)",
              "Module.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:152:5)",
              "node:internal/main/run_main_module:33:47"
            ]
          }
        ],
        "/YogaGoContainerStack/YogaGoAutoScalingGroup/InstanceRole/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoAutoScalingGroupInstanceRole0DC092B6"
          }
        ],
        "/YogaGoContainerStack/YogaGoAutoScalingGroup/InstanceRole/DefaultPolicy/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoAutoScalingGroupInstanceRoleDefaultPolicy1B9BFBB3"
          }
        ],
        "/YogaGoContainerStack/YogaGoAutoScalingGroup/InstanceProfile": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoAutoScalingGroupInstanceProfile077D8C2C"
          }
        ],
        "/YogaGoContainerStack/YogaGoAutoScalingGroup/LaunchTemplate/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoAutoScalingGroupLaunchTemplate642BF507"
          }
        ],
        "/YogaGoContainerStack/YogaGoAutoScalingGroup/ASG": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoAutoScalingGroupASGAF9BC45B"
          }
        ],
        "/YogaGoContainerStack/YogaGoAutoScalingGroup/DrainECSHook/Function/ServiceRole/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoAutoScalingGroupDrainECSHookFunctionServiceRoleCCB0C77D"
          }
        ],
        "/YogaGoContainerStack/YogaGoAutoScalingGroup/DrainECSHook/Function/ServiceRole/DefaultPolicy/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoAutoScalingGroupDrainECSHookFunctionServiceRoleDefaultPolicy1D48F04D"
          }
        ],
        "/YogaGoContainerStack/YogaGoAutoScalingGroup/DrainECSHook/Function/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoAutoScalingGroupDrainECSHookFunction962A7529"
          }
        ],
        "/YogaGoContainerStack/YogaGoAutoScalingGroup/DrainECSHook/Function/AllowInvoke:YogaGoContainerStackYogaGoAutoScalingGroupLifecycleHookDrainHookTopic5F9B6D8D": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoAutoScalingGroupDrainECSHookFunctionAllowInvokeYogaGoContainerStackYogaGoAutoScalingGroupLifecycleHookDrainHookTopic5F9B6D8DE1B5C85D"
          }
        ],
        "/YogaGoContainerStack/YogaGoAutoScalingGroup/DrainECSHook/Function/Topic/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoAutoScalingGroupDrainECSHookFunctionTopicEB4EB960"
          }
        ],
        "/YogaGoContainerStack/YogaGoAutoScalingGroup/LifecycleHookDrainHook/Topic/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoAutoScalingGroupLifecycleHookDrainHookTopic66F92E13"
          }
        ],
        "/YogaGoContainerStack/YogaGoAutoScalingGroup/LifecycleHookDrainHook/Role/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoAutoScalingGroupLifecycleHookDrainHookRole62298876"
          }
        ],
        "/YogaGoContainerStack/YogaGoAutoScalingGroup/LifecycleHookDrainHook/Role/DefaultPolicy/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoAutoScalingGroupLifecycleHookDrainHookRoleDefaultPolicy4E3282A8"
          }
        ],
        "/YogaGoContainerStack/YogaGoAutoScalingGroup/LifecycleHookDrainHook/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoAutoScalingGroupLifecycleHookDrainHookA2C80F2D"
          }
        ],
        "/YogaGoContainerStack/SsmParameterValue:--aws--service--ecs--optimized-ami--amazon-linux-2--recommended--image_id:C96584B6-F00A-464E-AD19-53AFF4B05118.Parameter": [
          {
            "type": "aws:cdk:logicalId",
            "data": "SsmParameterValueawsserviceecsoptimizedamiamazonlinux2recommendedimageidC96584B6F00A464EAD1953AFF4B05118Parameter"
          }
        ],
        "/YogaGoContainerStack/AsgCapacityProvider/AsgCapacityProvider": [
          {
            "type": "aws:cdk:logicalId",
            "data": "AsgCapacityProvider760D11D9"
          }
        ],
        "/YogaGoContainerStack/YogaGoTaskDefinition/Resource": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoTaskDefinition2183261A"
          }
        ],
        "/YogaGoContainerStack/YogaGoEcsService": [
          {
            "type": "aws:cdk:warning",
            "data": "minHealthyPercent has not been configured so the default value of 50% is used. The number of running tasks will decrease below the desired count during deployments etc. See https://github.com/aws/aws-cdk/issues/31705 [ack: @aws-cdk/aws-ecs:minHealthyPercent]",
            "trace": [
              "Annotations.addMessage (/Users/arunsubramaniam/garage/yoga-go/infrastructure/node_modules/aws-cdk-lib/core/lib/annotations.js:1:2066)",
              "Annotations.addWarningV2 (/Users/arunsubramaniam/garage/yoga-go/infrastructure/node_modules/aws-cdk-lib/core/lib/annotations.js:1:984)",
              "new BaseService (/Users/arunsubramaniam/garage/yoga-go/infrastructure/node_modules/aws-cdk-lib/aws-ecs/lib/base/base-service.js:1:8675)",
              "new Ec2Service2 (/Users/arunsubramaniam/garage/yoga-go/infrastructure/node_modules/aws-cdk-lib/aws-ecs/lib/ec2/ec2-service.js:1:7008)",
              "new Ec2Service2 (/Users/arunsubramaniam/garage/yoga-go/infrastructure/node_modules/aws-cdk-lib/core/lib/prop-injectable.js:1:681)",
              "new ContainerStack (/Users/arunsubramaniam/garage/yoga-go/infrastructure/lib/container-stack.ts:196:23)",
              "Object.<anonymous> (/Users/arunsubramaniam/garage/yoga-go/infrastructure/bin/app.ts:52:24)",
              "Module._compile (node:internal/modules/cjs/loader:1692:14)",
              "Module.m._compile (/Users/arunsubramaniam/.npm/_npx/1bf7c3c15bf47d04/node_modules/ts-node/src/index.ts:1618:23)",
              "node:internal/modules/cjs/loader:1824:10",
              "Object.require.extensions.<computed> [as .ts] (/Users/arunsubramaniam/.npm/_npx/1bf7c3c15bf47d04/node_modules/ts-node/src/index.ts:1621:12)",
              "Module.load (node:internal/modules/cjs/loader:1427:32)",
              "Module._load (node:internal/modules/cjs/loader:1250:12)",
              "TracingChannel.traceSync (node:diagnostics_channel:322:14)",
              "wrapModuleLoad (node:internal/modules/cjs/loader:235:24)",
              "Module.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:152:5)",
              "phase4 (/Users/arunsubramaniam/.npm/_npx/1bf7c3c15bf47d04/node_modules/ts-node/src/bin.ts:649:14)",
              "bootstrap (/Users/arunsubramaniam/.npm/_npx/1bf7c3c15bf47d04/node_modules/ts-node/src/bin.ts:95:10)",
              "main (/Users/arunsubramaniam/.npm/_npx/1bf7c3c15bf47d04/node_modules/ts-node/src/bin.ts:55:10)",
              "Object.<anonymous> (/Users/arunsubramaniam/.npm/_npx/1bf7c3c15bf47d04/node_modules/ts-node/src/bin.ts:800:3)",
              "Module._compile (node:internal/modules/cjs/loader:1692:14)",
              "Object.<anonymous> (node:internal/modules/cjs/loader:1824:10)",
              "Module.load (node:internal/modules/cjs/loader:1427:32)",
              "Module._load (node:internal/modules/cjs/loader:1250:12)",
              "TracingChannel.traceSync (node:diagnostics_channel:322:14)",
              "wrapModuleLoad (node:internal/modules/cjs/loader:235:24)",
              "Module.executeUserEntryPoint [as runMain] (node:internal/modules/run_main:152:5)",
              "node:internal/main/run_main_module:33:47"
            ]
          }
        ],
        "/YogaGoContainerStack/YogaGoEcsService/Service": [
          {
            "type": "aws:cdk:logicalId",
            "data": "YogaGoEcsService00483882"
          }
        ],
        "/YogaGoContainerStack/EcrRepositoryUri": [
          {
            "type": "aws:cdk:logicalId",
            "data": "EcrRepositoryUri"
          }
        ],
        "/YogaGoContainerStack/EcsClusterName": [
          {
            "type": "aws:cdk:logicalId",
            "data": "EcsClusterName"
          }
        ],
        "/YogaGoContainerStack/EcsServiceName": [
          {
            "type": "aws:cdk:logicalId",
            "data": "EcsServiceName"
          }
        ],
        "/YogaGoContainerStack/SecretsManagerArn": [
          {
            "type": "aws:cdk:logicalId",
            "data": "SecretsManagerArn"
          }
        ],
        "/YogaGoContainerStack/AutoScalingGroupName": [
          {
            "type": "aws:cdk:logicalId",
            "data": "AutoScalingGroupName"
          }
        ],
        "/YogaGoContainerStack/CDKMetadata/Default": [
          {
            "type": "aws:cdk:logicalId",
            "data": "CDKMetadata"
          }
        ],
        "/YogaGoContainerStack/BootstrapVersion": [
          {
            "type": "aws:cdk:logicalId",
            "data": "BootstrapVersion"
          }
        ],
        "/YogaGoContainerStack/CheckBootstrapVersion": [
          {
            "type": "aws:cdk:logicalId",
            "data": "CheckBootstrapVersion"
          }
        ]
      },
      "displayName": "YogaGoContainerStack"
    },
    "Tree": {
      "type": "cdk:tree",
      "properties": {
        "file": "tree.json"
      }
    },
    "aws-cdk-lib/feature-flag-report": {
      "type": "cdk:feature-flag-report",
      "properties": {
        "module": "aws-cdk-lib",
        "flags": {
          "@aws-cdk/aws-signer:signingProfileNamePassedToCfn": {
            "recommendedValue": true,
            "explanation": "Pass signingProfileName to CfnSigningProfile"
          },
          "@aws-cdk/core:newStyleStackSynthesis": {
            "recommendedValue": true,
            "explanation": "Switch to new stack synthesis method which enables CI/CD",
            "unconfiguredBehavesLike": {
              "v2": true
            }
          },
          "@aws-cdk/core:stackRelativeExports": {
            "recommendedValue": true,
            "explanation": "Name exports based on the construct paths relative to the stack, rather than the global construct path",
            "unconfiguredBehavesLike": {
              "v2": true
            }
          },
          "@aws-cdk/aws-ecs-patterns:secGroupsDisablesImplicitOpenListener": {
            "recommendedValue": true,
            "explanation": "Disable implicit openListener when custom security groups are provided"
          },
          "@aws-cdk/aws-rds:lowercaseDbIdentifier": {
            "recommendedValue": true,
            "explanation": "Force lowercasing of RDS Cluster names in CDK",
            "unconfiguredBehavesLike": {
              "v2": true
            }
          },
          "@aws-cdk/aws-apigateway:usagePlanKeyOrderInsensitiveId": {
            "recommendedValue": true,
            "explanation": "Allow adding/removing multiple UsagePlanKeys independently",
            "unconfiguredBehavesLike": {
              "v2": true
            }
          },
          "@aws-cdk/aws-lambda:recognizeVersionProps": {
            "recommendedValue": true,
            "explanation": "Enable this feature flag to opt in to the updated logical id calculation for Lambda Version created using the  `fn.currentVersion`.",
            "unconfiguredBehavesLike": {
              "v2": true
            }
          },
          "@aws-cdk/aws-lambda:recognizeLayerVersion": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "Enable this feature flag to opt in to the updated logical id calculation for Lambda Version created using the `fn.currentVersion`."
          },
          "@aws-cdk/aws-cloudfront:defaultSecurityPolicyTLSv1.2_2021": {
            "recommendedValue": true,
            "explanation": "Enable this feature flag to have cloudfront distributions use the security policy TLSv1.2_2021 by default.",
            "unconfiguredBehavesLike": {
              "v2": true
            }
          },
          "@aws-cdk/core:checkSecretUsage": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "Enable this flag to make it impossible to accidentally use SecretValues in unsafe locations"
          },
          "@aws-cdk/core:target-partitions": {
            "userValue": ["aws", "aws-cn"],
            "recommendedValue": ["aws", "aws-cn"],
            "explanation": "What regions to include in lookup tables of environment agnostic stacks"
          },
          "@aws-cdk-containers/ecs-service-extensions:enableDefaultLogDriver": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "ECS extensions will automatically add an `awslogs` driver if no logging is specified"
          },
          "@aws-cdk/aws-ec2:uniqueImdsv2TemplateName": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "Enable this feature flag to have Launch Templates generated by the `InstanceRequireImdsv2Aspect` use unique names."
          },
          "@aws-cdk/aws-ecs:arnFormatIncludesClusterName": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "ARN format used by ECS. In the new ARN format, the cluster name is part of the resource ID."
          },
          "@aws-cdk/aws-iam:minimizePolicies": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "Minimize IAM policies by combining Statements"
          },
          "@aws-cdk/core:validateSnapshotRemovalPolicy": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "Error on snapshot removal policies on resources that do not support it."
          },
          "@aws-cdk/aws-codepipeline:crossAccountKeyAliasStackSafeResourceName": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "Generate key aliases that include the stack name"
          },
          "@aws-cdk/aws-s3:createDefaultLoggingPolicy": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "Enable this feature flag to create an S3 bucket policy by default in cases where an AWS service would automatically create the Policy if one does not exist."
          },
          "@aws-cdk/aws-sns-subscriptions:restrictSqsDescryption": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "Restrict KMS key policy for encrypted Queues a bit more"
          },
          "@aws-cdk/aws-apigateway:disableCloudWatchRole": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "Make default CloudWatch Role behavior safe for multiple API Gateways in one environment"
          },
          "@aws-cdk/core:enablePartitionLiterals": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "Make ARNs concrete if AWS partition is known"
          },
          "@aws-cdk/aws-events:eventsTargetQueueSameAccount": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "Event Rules may only push to encrypted SQS queues in the same account"
          },
          "@aws-cdk/aws-ecs:disableExplicitDeploymentControllerForCircuitBreaker": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "Avoid setting the \"ECS\" deployment controller when adding a circuit breaker"
          },
          "@aws-cdk/aws-iam:importedRoleStackSafeDefaultPolicyName": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "Enable this feature to by default create default policy names for imported roles that depend on the stack the role is in."
          },
          "@aws-cdk/aws-s3:serverAccessLogsUseBucketPolicy": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "Use S3 Bucket Policy instead of ACLs for Server Access Logging"
          },
          "@aws-cdk/aws-route53-patters:useCertificate": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "Use the official `Certificate` resource instead of `DnsValidatedCertificate`"
          },
          "@aws-cdk/customresources:installLatestAwsSdkDefault": {
            "userValue": false,
            "recommendedValue": false,
            "explanation": "Whether to install the latest SDK by default in AwsCustomResource"
          },
          "@aws-cdk/aws-rds:databaseProxyUniqueResourceName": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "Use unique resource name for Database Proxy"
          },
          "@aws-cdk/aws-codedeploy:removeAlarmsFromDeploymentGroup": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "Remove CloudWatch alarms from deployment group"
          },
          "@aws-cdk/aws-apigateway:authorizerChangeDeploymentLogicalId": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "Include authorizer configuration in the calculation of the API deployment logical ID."
          },
          "@aws-cdk/aws-ec2:launchTemplateDefaultUserData": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "Define user data for a launch template by default when a machine image is provided."
          },
          "@aws-cdk/aws-secretsmanager:useAttachedSecretResourcePolicyForSecretTargetAttachments": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "SecretTargetAttachments uses the ResourcePolicy of the attached Secret."
          },
          "@aws-cdk/aws-redshift:columnId": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "Whether to use an ID to track Redshift column changes"
          },
          "@aws-cdk/aws-stepfunctions-tasks:enableEmrServicePolicyV2": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "Enable AmazonEMRServicePolicy_v2 managed policies"
          },
          "@aws-cdk/aws-ec2:restrictDefaultSecurityGroup": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "Restrict access to the VPC default security group"
          },
          "@aws-cdk/aws-apigateway:requestValidatorUniqueId": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "Generate a unique id for each RequestValidator added to a method"
          },
          "@aws-cdk/aws-kms:aliasNameRef": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "KMS Alias name and keyArn will have implicit reference to KMS Key"
          },
          "@aws-cdk/aws-kms:applyImportedAliasPermissionsToPrincipal": {
            "recommendedValue": true,
            "explanation": "Enable grant methods on Aliases imported by name to use kms:ResourceAliases condition"
          },
          "@aws-cdk/aws-autoscaling:generateLaunchTemplateInsteadOfLaunchConfig": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "Generate a launch template when creating an AutoScalingGroup"
          },
          "@aws-cdk/core:includePrefixInUniqueNameGeneration": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "Include the stack prefix in the stack name generation process"
          },
          "@aws-cdk/aws-efs:denyAnonymousAccess": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "EFS denies anonymous clients accesses"
          },
          "@aws-cdk/aws-opensearchservice:enableOpensearchMultiAzWithStandby": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "Enables support for Multi-AZ with Standby deployment for opensearch domains"
          },
          "@aws-cdk/aws-lambda-nodejs:useLatestRuntimeVersion": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "Enables aws-lambda-nodejs.Function to use the latest available NodeJs runtime as the default"
          },
          "@aws-cdk/aws-efs:mountTargetOrderInsensitiveLogicalId": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "When enabled, mount targets will have a stable logicalId that is linked to the associated subnet."
          },
          "@aws-cdk/aws-rds:auroraClusterChangeScopeOfInstanceParameterGroupWithEachParameters": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "When enabled, a scope of InstanceParameterGroup for AuroraClusterInstance with each parameters will change."
          },
          "@aws-cdk/aws-appsync:useArnForSourceApiAssociationIdentifier": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "When enabled, will always use the arn for identifiers for CfnSourceApiAssociation in the GraphqlApi construct rather than id."
          },
          "@aws-cdk/aws-rds:preventRenderingDeprecatedCredentials": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "When enabled, creating an RDS database cluster from a snapshot will only render credentials for snapshot credentials."
          },
          "@aws-cdk/aws-codepipeline-actions:useNewDefaultBranchForCodeCommitSource": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "When enabled, the CodeCommit source action is using the default branch name 'main'."
          },
          "@aws-cdk/aws-cloudwatch-actions:changeLambdaPermissionLogicalIdForLambdaAction": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "When enabled, the logical ID of a Lambda permission for a Lambda action includes an alarm ID."
          },
          "@aws-cdk/aws-codepipeline:crossAccountKeysDefaultValueToFalse": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "Enables Pipeline to set the default value for crossAccountKeys to false."
          },
          "@aws-cdk/aws-codepipeline:defaultPipelineTypeToV2": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "Enables Pipeline to set the default pipeline type to V2."
          },
          "@aws-cdk/aws-kms:reduceCrossAccountRegionPolicyScope": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "When enabled, IAM Policy created from KMS key grant will reduce the resource scope to this key only."
          },
          "@aws-cdk/pipelines:reduceAssetRoleTrustScope": {
            "recommendedValue": true,
            "explanation": "Remove the root account principal from PipelineAssetsFileRole trust policy",
            "unconfiguredBehavesLike": {
              "v2": true
            }
          },
          "@aws-cdk/aws-eks:nodegroupNameAttribute": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "When enabled, nodegroupName attribute of the provisioned EKS NodeGroup will not have the cluster name prefix."
          },
          "@aws-cdk/aws-ec2:ebsDefaultGp3Volume": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "When enabled, the default volume type of the EBS volume will be GP3"
          },
          "@aws-cdk/aws-ecs:removeDefaultDeploymentAlarm": {
            "userValue": true,
            "recommendedValue": true,
            "explanation": "When enabled, remove default deployment alarm settings"
          },
          "@aws-cdk/custom-resources:logApiResponseDataPropertyTrueDefault": {
            "userValue": false,
            "recommendedValue": false,
            "explanation": "When enabled, the custom resource used for `AwsCustomResource` will configure the `logApiResponseData` property as true by default"
          },
          "@aws-cdk/aws-s3:keepNotificationInImportedBucket": {
            "userValue": false,
            "recommendedValue": false,
            "explanation": "When enabled, Adding notifications to a bucket in the current stack will not remove notification from imported stack."
          },
          "@aws-cdk/aws-stepfunctions-tasks:useNewS3UriParametersForBedrockInvokeModelTask": {
            "recommendedValue": true,
            "explanation": "When enabled, use new props for S3 URI field in task definition of state machine for bedrock invoke model.",
            "unconfiguredBehavesLike": {
              "v2": true
            }
          },
          "@aws-cdk/core:explicitStackTags": {
            "recommendedValue": true,
            "explanation": "When enabled, stack tags need to be assigned explicitly on a Stack."
          },
          "@aws-cdk/aws-ecs:enableImdsBlockingDeprecatedFeature": {
            "recommendedValue": false,
            "explanation": "When set to true along with canContainersAccessInstanceRole=false in ECS cluster, new updated commands will be added to UserData to block container accessing IMDS. **Applicable to Linux only. IMPORTANT: See [details.](#aws-cdkaws-ecsenableImdsBlockingDeprecatedFeature)**"
          },
          "@aws-cdk/aws-ecs:disableEcsImdsBlocking": {
            "recommendedValue": true,
            "explanation": "When set to true, CDK synth will throw exception if canContainersAccessInstanceRole is false. **IMPORTANT: See [details.](#aws-cdkaws-ecsdisableEcsImdsBlocking)**"
          },
          "@aws-cdk/aws-ecs:reduceEc2FargateCloudWatchPermissions": {
            "recommendedValue": true,
            "explanation": "When enabled, we will only grant the necessary permissions when users specify cloudwatch log group through logConfiguration"
          },
          "@aws-cdk/aws-dynamodb:resourcePolicyPerReplica": {
            "recommendedValue": true,
            "explanation": "When enabled will allow you to specify a resource policy per replica, and not copy the source table policy to all replicas"
          },
          "@aws-cdk/aws-ec2:ec2SumTImeoutEnabled": {
            "recommendedValue": true,
            "explanation": "When enabled, initOptions.timeout and resourceSignalTimeout values will be summed together."
          },
          "@aws-cdk/aws-appsync:appSyncGraphQLAPIScopeLambdaPermission": {
            "recommendedValue": true,
            "explanation": "When enabled, a Lambda authorizer Permission created when using GraphqlApi will be properly scoped with a SourceArn."
          },
          "@aws-cdk/aws-rds:setCorrectValueForDatabaseInstanceReadReplicaInstanceResourceId": {
            "recommendedValue": true,
            "explanation": "When enabled, the value of property `instanceResourceId` in construct `DatabaseInstanceReadReplica` will be set to the correct value which is `DbiResourceId` instead of currently `DbInstanceArn`"
          },
          "@aws-cdk/core:cfnIncludeRejectComplexResourceUpdateCreatePolicyIntrinsics": {
            "recommendedValue": true,
            "explanation": "When enabled, CFN templates added with `cfn-include` will error if the template contains Resource Update or Create policies with CFN Intrinsics that include non-primitive values."
          },
          "@aws-cdk/aws-lambda-nodejs:sdkV3ExcludeSmithyPackages": {
            "recommendedValue": true,
            "explanation": "When enabled, both `@aws-sdk` and `@smithy` packages will be excluded from the Lambda Node.js 18.x runtime to prevent version mismatches in bundled applications."
          },
          "@aws-cdk/aws-stepfunctions-tasks:fixRunEcsTaskPolicy": {
            "recommendedValue": true,
            "explanation": "When enabled, the resource of IAM Run Ecs policy generated by SFN EcsRunTask will reference the definition, instead of constructing ARN."
          },
          "@aws-cdk/aws-ec2:bastionHostUseAmazonLinux2023ByDefault": {
            "recommendedValue": true,
            "explanation": "When enabled, the BastionHost construct will use the latest Amazon Linux 2023 AMI, instead of Amazon Linux 2."
          },
          "@aws-cdk/core:aspectStabilization": {
            "recommendedValue": true,
            "explanation": "When enabled, a stabilization loop will be run when invoking Aspects during synthesis.",
            "unconfiguredBehavesLike": {
              "v2": true
            }
          },
          "@aws-cdk/aws-route53-targets:userPoolDomainNameMethodWithoutCustomResource": {
            "recommendedValue": true,
            "explanation": "When enabled, use a new method for DNS Name of user pool domain target without creating a custom resource."
          },
          "@aws-cdk/aws-elasticloadbalancingV2:albDualstackWithoutPublicIpv4SecurityGroupRulesDefault": {
            "recommendedValue": true,
            "explanation": "When enabled, the default security group ingress rules will allow IPv6 ingress from anywhere"
          },
          "@aws-cdk/aws-iam:oidcRejectUnauthorizedConnections": {
            "recommendedValue": true,
            "explanation": "When enabled, the default behaviour of OIDC provider will reject unauthorized connections"
          },
          "@aws-cdk/core:enableAdditionalMetadataCollection": {
            "recommendedValue": true,
            "explanation": "When enabled, CDK will expand the scope of usage data collected to better inform CDK development and improve communication for security concerns and emerging issues."
          },
          "@aws-cdk/aws-lambda:createNewPoliciesWithAddToRolePolicy": {
            "recommendedValue": false,
            "explanation": "[Deprecated] When enabled, Lambda will create new inline policies with AddToRolePolicy instead of adding to the Default Policy Statement"
          },
          "@aws-cdk/aws-s3:setUniqueReplicationRoleName": {
            "recommendedValue": true,
            "explanation": "When enabled, CDK will automatically generate a unique role name that is used for s3 object replication."
          },
          "@aws-cdk/pipelines:reduceStageRoleTrustScope": {
            "recommendedValue": true,
            "explanation": "Remove the root account principal from Stage addActions trust policy",
            "unconfiguredBehavesLike": {
              "v2": true
            }
          },
          "@aws-cdk/aws-events:requireEventBusPolicySid": {
            "recommendedValue": true,
            "explanation": "When enabled, grantPutEventsTo() will use resource policies with Statement IDs for service principals."
          },
          "@aws-cdk/core:aspectPrioritiesMutating": {
            "recommendedValue": true,
            "explanation": "When set to true, Aspects added by the construct library on your behalf will be given a priority of MUTATING."
          },
          "@aws-cdk/aws-dynamodb:retainTableReplica": {
            "recommendedValue": true,
            "explanation": "When enabled, table replica will be default to the removal policy of source table unless specified otherwise."
          },
          "@aws-cdk/cognito:logUserPoolClientSecretValue": {
            "recommendedValue": false,
            "explanation": "When disabled, the value of the user pool client secret will not be logged in the custom resource lambda function logs."
          },
          "@aws-cdk/pipelines:reduceCrossAccountActionRoleTrustScope": {
            "recommendedValue": true,
            "explanation": "When enabled, scopes down the trust policy for the cross-account action role",
            "unconfiguredBehavesLike": {
              "v2": true
            }
          },
          "@aws-cdk/aws-stepfunctions:useDistributedMapResultWriterV2": {
            "recommendedValue": true,
            "explanation": "When enabled, the resultWriterV2 property of DistributedMap will be used insted of resultWriter"
          },
          "@aws-cdk/s3-notifications:addS3TrustKeyPolicyForSnsSubscriptions": {
            "recommendedValue": true,
            "explanation": "Add an S3 trust policy to a KMS key resource policy for SNS subscriptions."
          },
          "@aws-cdk/aws-ec2:requirePrivateSubnetsForEgressOnlyInternetGateway": {
            "recommendedValue": true,
            "explanation": "When enabled, the EgressOnlyGateway resource is only created if private subnets are defined in the dual-stack VPC."
          },
          "@aws-cdk/aws-ec2-alpha:useResourceIdForVpcV2Migration": {
            "recommendedValue": false,
            "explanation": "When enabled, use resource IDs for VPC V2 migration"
          },
          "@aws-cdk/aws-s3:publicAccessBlockedByDefault": {
            "recommendedValue": true,
            "explanation": "When enabled, setting any combination of options for BlockPublicAccess will automatically set true for any options not defined."
          },
          "@aws-cdk/aws-lambda:useCdkManagedLogGroup": {
            "recommendedValue": true,
            "explanation": "When enabled, CDK creates and manages loggroup for the lambda function"
          },
          "@aws-cdk/aws-stepfunctions-tasks:httpInvokeDynamicJsonPathEndpoint": {
            "recommendedValue": true,
            "explanation": "When enabled, allows using a dynamic apiEndpoint with JSONPath format in HttpInvoke tasks.",
            "unconfiguredBehavesLike": {
              "v2": true
            }
          },
          "@aws-cdk/aws-ecs-patterns:uniqueTargetGroupId": {
            "recommendedValue": true,
            "explanation": "When enabled, ECS patterns will generate unique target group IDs to prevent conflicts during load balancer replacement"
          }
        }
      }
    }
  },
  "minimumCliVersion": "2.1031.0"
}
